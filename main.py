import asyncio
import logging
from datetime import datetime, timezone, timedelta
import aiosqlite

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart, Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from config import settings

logging.basicConfig(level=logging.INFO)
bot = Bot(settings.bot_token, parse_mode="HTML")
dp = Dispatcher()

DB_PATH = settings.db_path

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ===
CREATE_SQL = """
PRAGMA journal_mode=WAL;

CREATE TABLE IF NOT EXISTS users (
  user_id INTEGER PRIMARY KEY,
  mode TEXT DEFAULT 'companion',
  created_at TEXT
);

CREATE TABLE IF NOT EXISTS diary (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id INTEGER,
  ts TEXT,
  text TEXT
);

CREATE TABLE IF NOT EXISTS goals (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id INTEGER,
  title TEXT,
  deadline_ts TEXT,
  done INTEGER DEFAULT 0,
  created_ts TEXT
);

CREATE TABLE IF NOT EXISTS praise_stats (
  user_id INTEGER PRIMARY KEY,
  streak INTEGER DEFAULT 0,
  last_ts TEXT
);
"""

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.executescript(CREATE_SQL)
        await db.commit()

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
def main_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ö–æ–º–ø–∞–Ω—å–æ–Ω"), KeyboardButton(text="–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞"), KeyboardButton(text="–ü–æ—Ö–≤–∞–ª–∞")],
            [KeyboardButton(text="–ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )

# === –£—Ç–∏–ª–∏—Ç—ã ===
async def ensure_user(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT 1 FROM users WHERE user_id=?", (user_id,))
        if not await cur.fetchone():
            await db.execute(
                "INSERT INTO users(user_id, mode, created_at) VALUES(?,?,?)",
                (user_id, "companion", datetime.utcnow().isoformat())
            )
            await db.commit()

async def set_mode(user_id: int, mode: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET mode=? WHERE user_id=?", (mode, user_id))
        await db.commit()

async def get_mode(user_id: int) -> str:
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT mode FROM users WHERE user_id=?", (user_id,))
        row = await cur.fetchone()
        return row[0] if row else "companion"

# === –•—ç–Ω–¥–ª–µ—Ä—ã ===
@dp.message(CommandStart())
async def start(m: Message):
    await ensure_user(m.from_user.id)
    await m.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤–æ <b>–í–µ—á–µ—Ä–Ω–∏–π –°–æ–±–µ—Å–µ–¥–Ω–∏–∫</b> üåô\n\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ:\n"
        "‚Ä¢ –í—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º—ã—Å–ª–∏ (–ö–æ–º–ø–∞–Ω—å–æ–Ω)\n"
        "‚Ä¢ –°—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞)\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Å–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–ü–æ—Ö–≤–∞–ª–∞)\n\n"
        "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
        reply_markup=main_kb()
    )

@dp.message(F.text.lower() == "–∫–æ–º–ø–∞–Ω—å–æ–Ω")
async def mode_companion(m: Message):
    await set_mode(m.from_user.id, "companion")
    await m.answer("–†–µ–∂–∏–º –ö–æ–º–ø–∞–Ω—å–æ–Ω –≤–∫–ª—é—á—ë–Ω. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ.")

@dp.message(F.text.lower() == "–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞")
async def mode_discipline(m: Message):
    await set_mode(m.from_user.id, "discipline")
    await m.answer("–†–µ–∂–∏–º –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –≤–∫–ª—é—á—ë–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /goal —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å.")

@dp.message(F.text.lower() == "–ø–æ—Ö–≤–∞–ª–∞")
async def mode_praise(m: Message):
    await set_mode(m.from_user.id, "praise")
    await m.answer("–†–µ–∂–∏–º –ü–æ—Ö–≤–∞–ª–∞ –≤–∫–ª—é—á—ë–Ω. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å ‚Äî —è –æ—Ç–≤–µ—á—É –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

@dp.message(F.text.lower() == "–ø–æ–º–æ—â—å")
@dp.message(Command("help"))
async def help_cmd(m: Message):
    await m.answer(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/goal <—Ç–µ–∫—Å—Ç> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å\n"
        "/goals ‚Äî —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π\n"
        "/done <id> ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å —Ü–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n"
        "/summary ‚Äî –∫—Ä–∞—Ç–∫–∏–π –∏—Ç–æ–≥ –¥–Ω—è"
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
@dp.message(F.text, ~F.text.startswith("/"))
async def route_by_mode(m: Message):
    mode = await get_mode(m.from_user.id)
    if mode == "companion":
        await m.answer("–ó–∞–ø–∏—Å–∞–ª. –•–æ—á–µ—à—å, –≤–µ—á–µ—Ä–æ–º —è –Ω–∞–ø–æ–º–Ω—é –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥?")
    elif mode == "discipline":
        await m.answer("–ó–∞–ø–æ–º–Ω–∏–ª. –î–æ–±–∞–≤—å —Ü–µ–ª—å —á–µ—Ä–µ–∑ /goal, —Å–ø–∏—Å–æ–∫ ‚Äî /goals.")
    else:
        await m.answer("–¢—ã –º–æ–ª–æ–¥–µ—Ü. –î–∞–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ —Å–µ–≥–æ–¥–Ω—è ‚Äî —ç—Ç–æ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥.")

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
scheduler = AsyncIOScheduler()

async def daily_jobs():
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT user_id, mode FROM users")
        users = await cur.fetchall()
    for uid, mode in users:
        try:
            if mode == "companion":
                await bot.send_message(uid, "üåô –í–µ—á–µ—Ä–Ω–∏–π –°–æ–±–µ—Å–µ–¥–Ω–∏–∫: —Ö–æ—á–µ—à—å –∏—Ç–æ–≥ –¥–Ω—è? –ù–∞–ø–∏—à–∏ /summary.")
            elif mode == "discipline":
                await bot.send_message(uid, "üåô –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ —Ü–µ–ª–∏ (/goals).")
            else:
                await bot.send_message(uid, "üåô –ó–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ –≤–∞–∂–Ω–∞. –¢—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è.")
        except Exception as e:
            logging.warning(f"daily_jobs error for {uid}: {e}")

async def on_startup():
    await init_db()
    hour_utc = (settings.daily_hour_msk - 3) % 24
    scheduler.add_job(daily_jobs, CronTrigger(hour=hour_utc, minute=0))
    scheduler.start()
    logging.info("Scheduler started")

async def main():
    await on_startup()
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("Stopped")
